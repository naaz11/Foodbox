{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/* We mark our Product service as avaiable for dependency injection by decorating it with\r\n   the @Injectable() annotation. */\n//The Frontend ProductService class should mirror the corresponding backend Product controller class\n\nexport class ProductService {\n  //Constructor\n  //whenever we generate a ProductService object, it will have the ability to perform HTTP requests due to dependency injection\n  //Note: HttpClient will not send the raw data. It will send an Observable that you will have to subscribe to.\n  constructor(http) {\n    this.http = http; //Properties\n\n    this.restUrl = environment.restUrl; //obtained from the development env settings\n  } //HTTP Methods - should mirror the ProductController on the backend\n\n  /* Notes: For Angular to connect to backend servers, we need Observables (from Reactive Extension library)\r\n   * An Observable represents an asynchronous data stream where data arrives asynchronously.\r\n   * Observables provide support for passing messages between part of your application\r\n   * The observer pattern is a software design pattern in which an object (subject),\r\n   * maintains a list of its dependents (observers/subscribers/watchers), and notifies them automatically of state changes.\r\n   * Observables are declarative — that is, you define a function for publishing values, but\r\n   * it is not executed until a consumer subscribes to it.\r\n   * The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.\r\n   * Source: https://angular.io/guide/observables\r\n   */\n\n  /* *******************************************\r\n  * Method Name: getAllProducts()\r\n  * Access Type: public\r\n  * Input Parameters: none\r\n  * Return Type: Observable Product[] array\r\n  * Purpose: Calls the backend /products/all endpoint (HTTP GET)\r\n  * ******************************************* */\n\n\n  getAllProducts() {\n    return this.http.get(`${this.restUrl}/products/all`);\n  }\n  /* *******************************************\r\n   * Method Name: getProductById()\r\n   * Access Type: public\r\n   * Input Parameters: Product ID number\r\n   * Return Type: Observable Product object\r\n   * Purpose: Calls the backend /products/product/id endpoint (HTTP GET)\r\n   * ******************************************* */\n\n\n  getProductById(id) {\n    return this.http.get(`${this.restUrl}/products/product/` + id);\n  }\n  /* *******************************************\r\n   * Method Name: addProduct()\r\n   * Access Type: public\r\n   * Input Parameters: Product Object\r\n   * Return Type: Observable of any Product object\r\n   * Purpose: Calls the backend /products/add endpoint (HTTP POST)\r\n   * ******************************************* */\n\n\n  addProduct(product) {\n    return this.http.post(`${this.restUrl}/products/add`, product);\n  }\n  /* *******************************************\r\n   * Method Name: updateProduct()\r\n   * Access Type: public\r\n   * Input Parameters: Single Product object\r\n   * Return Type: Observable of Product\r\n   * Purpose: Calls the backend /products/product/update/id endpoint (HTTP PUT)\r\n   * ******************************************* */\n\n\n  updateProduct(product, id) {\n    return this.http.put(`${this.restUrl}/products/product/update/${id}`, product);\n  }\n  /* *******************************************\r\n   * Method Name: deleteProductById()\r\n   * Access Type: public\r\n   * Input Parameters: Product ID to be deleted\r\n   * Return Type: void Observable\r\n   * Purpose: Calls the backend /products/product/delete/id endpoint (HTTP DELETE)\r\n   * ******************************************* */\n\n\n  deleteProductById(id) {\n    console.log(\"Made it to the delete method...\");\n    return this.http.delete(`${this.restUrl}/products/product/delete/${id}`);\n  }\n  /* *******************************************\r\n   * Method Name: getAllProductsBySearchTerm()\r\n   * Access Type: public\r\n   * Input Parameters: search term string\r\n   * Return Type: Observable Product[] array\r\n   * Purpose: Calls the backend endpoint (HTTP GET)\r\n   * ******************************************* */\n\n\n  getAllProductsBySearchTerm(searchTerm) {\n    return this.http.get(`${this.restUrl}/products/search/${searchTerm}`);\n  }\n  /* *******************************************\r\n   * Method Name: getAllProductsByTag()\r\n   * Access Type: public\r\n   * Input Parameters: search term string\r\n   * Return Type: Observable Product[] array\r\n   * Purpose: Calls the backend endpoint (HTTP GET)\r\n   * ******************************************* */\n\n\n  getAllProductsByTag(tag) {\n    return tag.toLowerCase() === \"all\" ? this.getAllProducts() : this.http.get(`${this.restUrl}/products/tag/${tag}`);\n  }\n  /* *******************************************\r\n   * Method Name: getAllProductsByCuisine()\r\n   * Access Type: public\r\n   * Input Parameters: cuisine string\r\n   * Return Type: Observable Product[] array\r\n   * Purpose: Calls the backend endpoint (HTTP GET)\r\n   * ******************************************* */\n\n\n  getAllProductsByCuisine(desiredCuisine) {\n    return desiredCuisine.toLowerCase() === \"all\" ? this.getAllProducts() : this.http.get(`${this.restUrl}/products/cuisine/${desiredCuisine}`);\n  }\n\n} //end class\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,WAAT,QAA4B,8BAA5B;;;AAEA;;AAMA;;AACA,OAAM,MAAOC,cAAP,CAAqB;EAKzB;EACA;EACA;EACAC,YAAoBC,IAApB,EAAmC;IAAf,iBAAe,CANnC;;IACQ,eAAiBH,WAAW,CAACI,OAA7B,CAK2B,CALW;EAM7C,CATwB,CAYzB;;EAEA;;;;;;;;;;;EAWC;;;;;;;;;EAOOC,cAAc;IACpB,OAAO,KAAKF,IAAL,CAAUG,GAAV,CAAyB,GAAG,KAAKF,OAAO,eAAxC,CAAP;EACD;EAED;;;;;;;;;EAOOG,cAAc,CAACC,EAAD,EAAU;IAC3B,OAAO,KAAKL,IAAL,CAAUG,GAAV,CAAuB,GAAG,KAAKF,OAAO,oBAAf,GAAsCI,EAA7D,CAAP;EACH;EAED;;;;;;;;;EAOOC,UAAU,CAACC,OAAD,EAAgB;IAC/B,OAAO,KAAKP,IAAL,CAAUQ,IAAV,CAAwB,GAAG,KAAKP,OAAO,eAAvC,EAAwDM,OAAxD,CAAP;EACD;EAED;;;;;;;;;EAOOE,aAAa,CAACF,OAAD,EAAmBF,EAAnB,EAA4B;IAC9C,OAAO,KAAKL,IAAL,CAAUU,GAAV,CAAuB,GAAG,KAAKT,OAAO,4BAA4BI,EAAE,EAApE,EAAwEE,OAAxE,CAAP;EACD;EAED;;;;;;;;;EAOOI,iBAAiB,CAACN,EAAD,EAAW;IACjCO,OAAO,CAACC,GAAR,CAAY,iCAAZ;IACA,OAAO,KAAKb,IAAL,CAAUc,MAAV,CAA0B,GAAG,KAAKb,OAAO,4BAA4BI,EAAE,EAAvE,CAAP;EACD;EAED;;;;;;;;;EAOAU,0BAA0B,CAACC,UAAD,EAAkB;IAC1C,OAAO,KAAKhB,IAAL,CAAUG,GAAV,CAAyB,GAAG,KAAKF,OAAO,oBAAoBe,UAAU,EAAtE,CAAP;EACD;EAED;;;;;;;;;EAOAC,mBAAmB,CAACC,GAAD,EAAY;IAC7B,OAAOA,GAAG,CAACC,WAAJ,OAAsB,KAAtB,GACL,KAAKjB,cAAL,EADK,GAEL,KAAKF,IAAL,CAAUG,GAAV,CAAyB,GAAG,KAAKF,OAAO,iBAAiBiB,GAAG,EAA5D,CAFF;EAGD;EAED;;;;;;;;;EAOAE,uBAAuB,CAACC,cAAD,EAAsB;IAC3C,OAAOA,cAAc,CAACF,WAAf,OAAiC,KAAjC,GACP,KAAKjB,cAAL,EADO,GAEP,KAAKF,IAAL,CAAUG,GAAV,CAAyB,GAAG,KAAKF,OAAO,qBAAqBoB,cAAc,EAA3E,CAFA;EAGD;;AApHwB,C,CAsH1B;;;mBAtHYvB,gBAAcwB;AAAA;;;SAAdxB;EAAcyB,SAAdzB,cAAc;EAAA0B,YAJb","names":["environment","ProductService","constructor","http","restUrl","getAllProducts","get","getProductById","id","addProduct","product","post","updateProduct","put","deleteProductById","console","log","delete","getAllProductsBySearchTerm","searchTerm","getAllProductsByTag","tag","toLowerCase","getAllProductsByCuisine","desiredCuisine","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Ameer\\Documents\\naaz-codes\\simplilearn_7\\downloaded_codes\\Phase 5 Capstone - Food Box\\frontend\\src\\app\\services\\product\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from 'src/app/models/Product';\nimport { Tag } from 'src/app/models/Tag';\nimport { environment } from 'src/environments/environment';\n\n/* We mark our Product service as avaiable for dependency injection by decorating it with\n   the @Injectable() annotation. */\n@Injectable({\n  providedIn: 'root'\n})\n\n//The Frontend ProductService class should mirror the corresponding backend Product controller class\nexport class ProductService {\n\n  //Properties\n  private restUrl:string = environment.restUrl; //obtained from the development env settings\n\n  //Constructor\n  //whenever we generate a ProductService object, it will have the ability to perform HTTP requests due to dependency injection\n  //Note: HttpClient will not send the raw data. It will send an Observable that you will have to subscribe to.\n  constructor(private http:HttpClient) {\n  }\n\n\n  //HTTP Methods - should mirror the ProductController on the backend\n\n  /* Notes: For Angular to connect to backend servers, we need Observables (from Reactive Extension library)\n   * An Observable represents an asynchronous data stream where data arrives asynchronously.\n   * Observables provide support for passing messages between part of your application\n   * The observer pattern is a software design pattern in which an object (subject),\n   * maintains a list of its dependents (observers/subscribers/watchers), and notifies them automatically of state changes.\n   * Observables are declarative — that is, you define a function for publishing values, but\n   * it is not executed until a consumer subscribes to it.\n   * The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.\n   * Source: https://angular.io/guide/observables\n   */\n\n   /* *******************************************\n   * Method Name: getAllProducts()\n   * Access Type: public\n   * Input Parameters: none\n   * Return Type: Observable Product[] array\n   * Purpose: Calls the backend /products/all endpoint (HTTP GET)\n   * ******************************************* */\n   public getAllProducts():Observable<Product[]>{\n    return this.http.get<Product[]>(`${this.restUrl}/products/all`);\n  }\n\n  /* *******************************************\n   * Method Name: getProductById()\n   * Access Type: public\n   * Input Parameters: Product ID number\n   * Return Type: Observable Product object\n   * Purpose: Calls the backend /products/product/id endpoint (HTTP GET)\n   * ******************************************* */\n  public getProductById(id:number):Observable<Product>{\n      return this.http.get<Product>(`${this.restUrl}/products/product/` + id);\n  }\n\n  /* *******************************************\n   * Method Name: addProduct()\n   * Access Type: public\n   * Input Parameters: Product Object\n   * Return Type: Observable of any Product object\n   * Purpose: Calls the backend /products/add endpoint (HTTP POST)\n   * ******************************************* */\n  public addProduct(product:Product):Observable<Product>{\n    return this.http.post<Product>(`${this.restUrl}/products/add`, product);\n  }\n\n  /* *******************************************\n   * Method Name: updateProduct()\n   * Access Type: public\n   * Input Parameters: Single Product object\n   * Return Type: Observable of Product\n   * Purpose: Calls the backend /products/product/update/id endpoint (HTTP PUT)\n   * ******************************************* */\n  public updateProduct(product: Product, id:number): Observable<Product> {\n    return this.http.put<Product>(`${this.restUrl}/products/product/update/${id}`, product);\n  }\n\n  /* *******************************************\n   * Method Name: deleteProductById()\n   * Access Type: public\n   * Input Parameters: Product ID to be deleted\n   * Return Type: void Observable\n   * Purpose: Calls the backend /products/product/delete/id endpoint (HTTP DELETE)\n   * ******************************************* */\n  public deleteProductById(id: number):Observable<Product> {\n    console.log(\"Made it to the delete method...\");\n    return this.http.delete<Product>(`${this.restUrl}/products/product/delete/${id}`);\n  }\n\n  /* *******************************************\n   * Method Name: getAllProductsBySearchTerm()\n   * Access Type: public\n   * Input Parameters: search term string\n   * Return Type: Observable Product[] array\n   * Purpose: Calls the backend endpoint (HTTP GET)\n   * ******************************************* */\n  getAllProductsBySearchTerm(searchTerm:string):Observable<Product[]>{\n    return this.http.get<Product[]>(`${this.restUrl}/products/search/${searchTerm}`);\n  }\n\n  /* *******************************************\n   * Method Name: getAllProductsByTag()\n   * Access Type: public\n   * Input Parameters: search term string\n   * Return Type: Observable Product[] array\n   * Purpose: Calls the backend endpoint (HTTP GET)\n   * ******************************************* */\n  getAllProductsByTag(tag: string): Observable<Product[]> {\n    return tag.toLowerCase() === \"all\" ?\n      this.getAllProducts() :\n      this.http.get<Product[]>(`${this.restUrl}/products/tag/${tag}`);\n  }\n\n  /* *******************************************\n   * Method Name: getAllProductsByCuisine()\n   * Access Type: public\n   * Input Parameters: cuisine string\n   * Return Type: Observable Product[] array\n   * Purpose: Calls the backend endpoint (HTTP GET)\n   * ******************************************* */\n  getAllProductsByCuisine(desiredCuisine:string):Observable<Product[]>{\n    return desiredCuisine.toLowerCase() === \"all\" ?\n    this.getAllProducts() :\n    this.http.get<Product[]>(`${this.restUrl}/products/cuisine/${desiredCuisine}`);\n  }\n\n}//end class\n"]},"metadata":{},"sourceType":"module"}