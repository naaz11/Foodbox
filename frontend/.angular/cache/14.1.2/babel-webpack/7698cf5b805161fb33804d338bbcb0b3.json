{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/* We mark our Product service as avaiable for dependency injection by decorating it with\r\n   the @Injectable() annotation. */\n\nexport class TagsBarService {\n  //Constructor\n  //whenever we generate a ProductService object, it will have the ability to perform HTTP requests due to dependency injection\n  //Note: HttpClient will not send the raw data. It will send an Observable that you will have to subscribe to.\n  constructor(http) {\n    this.http = http; //Properties\n\n    this.restUrl = environment.restUrl; //obtained from the development env settings\n  } //HTTP Methods - should mirror the ProductController on the backend\n\n  /* Notes: For Angular to connect to backend servers, we need Observables (from Reactive Extension library)\r\n   * An Observable represents an asynchronous data stream where data arrives asynchronously.\r\n   * Observables provide support for passing messages between part of your application\r\n   * The observer pattern is a software design pattern in which an object (subject),\r\n   * maintains a list of its dependents (observers/subscribers/watchers), and notifies them automatically of state changes.\r\n   * Observables are declarative — that is, you define a function for publishing values, but\r\n   * it is not executed until a consumer subscribes to it.\r\n   * The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.\r\n   * Source: https://angular.io/guide/observables\r\n   */\n\n  /* *******************************************\r\n   * Method Name: getAllTags()\r\n   * Access Type: public\r\n   * Input Parameters: none\r\n   * Return Type: Observable Tag[] array\r\n   * Purpose: Calls the backend endpoint (HTTP GET)\r\n   * ******************************************* */\n\n\n  getAllTags() {\n    return this.http.get(`${this.restUrl}/tags/all`);\n  }\n  /* *******************************************\r\n   * Method Name: addTag()\r\n   * Access Type: public\r\n   * Input Parameters: Tag Object\r\n   * Return Type: Observable of any Tag object\r\n   * Purpose: Calls the backend /products/add endpoint (HTTP POST)\r\n   * ******************************************* */\n\n\n  addTag(tag) {\n    return this.http.post(`${this.restUrl}/tags/add`, tag);\n  }\n  /* *******************************************\r\n     * Method Name: updateTag()\r\n     * Access Type: public\r\n     * Input Parameters: Single Tag object\r\n     * Return Type: Observable of Tag\r\n     * Purpose: Calls the backend /products/product/update/id endpoint (HTTP PUT)\r\n     * ******************************************* */\n\n\n  updateTag(tag, id) {\n    return this.http.put(`${this.restUrl}/tags/tag/update/${id}`, tag);\n  }\n\n} //end class\n\nTagsBarService.ɵfac = function TagsBarService_Factory(t) {\n  return new (t || TagsBarService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nTagsBarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TagsBarService,\n  factory: TagsBarService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,WAAT,QAA4B,8BAA5B;;;AAEA;;;AAKA,OAAM,MAAOC,cAAP,CAAqB;EAKzB;EACA;EACA;EACAC,YAAoBC,IAApB,EAAmC;IAAf,iBAAe,CANnC;;IACQ,eAAiBH,WAAW,CAACI,OAA7B,CAK2B,CALW;EAKN,CARf,CAUzB;;EAEA;;;;;;;;;;;EAWA;;;;;;;;;EAOAC,UAAU;IACR,OAAO,KAAKF,IAAL,CAAUG,GAAV,CAAqB,GAAG,KAAKF,OAAO,WAApC,CAAP;EACD;EAED;;;;;;;;;EAOOG,MAAM,CAACC,GAAD,EAAQ;IACnB,OAAO,KAAKL,IAAL,CAAUM,IAAV,CAAoB,GAAG,KAAKL,OAAO,WAAnC,EAAgDI,GAAhD,CAAP;EACD;EAEH;;;;;;;;;EAOOE,SAAS,CAACF,GAAD,EAAWG,EAAX,EAAoB;IAClC,OAAO,KAAKR,IAAL,CAAUS,GAAV,CAAmB,GAAG,KAAKR,OAAO,oBAAoBO,EAAE,EAAxD,EAA4DH,GAA5D,CAAP;EACD;;AAtD0B,C,CAwD1B;;;mBAxDYP,gBAAcY;AAAA;;;SAAdZ;EAAca,SAAdb,cAAc;EAAAc,YAFb","names":["environment","TagsBarService","constructor","http","restUrl","getAllTags","get","addTag","tag","post","updateTag","id","put","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Ameer\\Documents\\naaz-codes\\simplilearn_7\\downloaded_codes\\Phase 5 Capstone - Food Box\\frontend\\src\\app\\services\\tags-bar\\tags-bar.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Tag } from 'src/app/models/Tag';\nimport { environment } from 'src/environments/environment';\n\n/* We mark our Product service as avaiable for dependency injection by decorating it with\n   the @Injectable() annotation. */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagsBarService {\n\n  //Properties\n  private restUrl:string = environment.restUrl; //obtained from the development env settings\n\n  //Constructor\n  //whenever we generate a ProductService object, it will have the ability to perform HTTP requests due to dependency injection\n  //Note: HttpClient will not send the raw data. It will send an Observable that you will have to subscribe to.\n  constructor(private http:HttpClient) { }\n\n  //HTTP Methods - should mirror the ProductController on the backend\n\n  /* Notes: For Angular to connect to backend servers, we need Observables (from Reactive Extension library)\n   * An Observable represents an asynchronous data stream where data arrives asynchronously.\n   * Observables provide support for passing messages between part of your application\n   * The observer pattern is a software design pattern in which an object (subject),\n   * maintains a list of its dependents (observers/subscribers/watchers), and notifies them automatically of state changes.\n   * Observables are declarative — that is, you define a function for publishing values, but\n   * it is not executed until a consumer subscribes to it.\n   * The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.\n   * Source: https://angular.io/guide/observables\n   */\n\n  /* *******************************************\n   * Method Name: getAllTags()\n   * Access Type: public\n   * Input Parameters: none\n   * Return Type: Observable Tag[] array\n   * Purpose: Calls the backend endpoint (HTTP GET)\n   * ******************************************* */\n  getAllTags(): Observable<Tag[]> {\n    return this.http.get<Tag[]>(`${this.restUrl}/tags/all`);\n  }\n\n  /* *******************************************\n   * Method Name: addTag()\n   * Access Type: public\n   * Input Parameters: Tag Object\n   * Return Type: Observable of any Tag object\n   * Purpose: Calls the backend /products/add endpoint (HTTP POST)\n   * ******************************************* */\n  public addTag(tag:Tag):Observable<Tag>{\n    return this.http.post<Tag>(`${this.restUrl}/tags/add`, tag);\n  }\n\n/* *******************************************\n   * Method Name: updateTag()\n   * Access Type: public\n   * Input Parameters: Single Tag object\n   * Return Type: Observable of Tag\n   * Purpose: Calls the backend /products/product/update/id endpoint (HTTP PUT)\n   * ******************************************* */\npublic updateTag(tag: Tag, id:number): Observable<Tag> {\n  return this.http.put<Tag>(`${this.restUrl}/tags/tag/update/${id}`, tag);\n}\n\n}//end class\n"]},"metadata":{},"sourceType":"module"}